
require 'rake'
#require 'rake/clean'
require 'colorize'
require 'logger'

$stdout.sync = true

logger = Logger.new(STDOUT)
logger.formatter = proc do |severity, datetime, progname, msg|
  "#{severity} #{datetime}: #{msg}\n"
end

task :default => %w[create_config create_bin install]

os = RbConfig::CONFIG["host_os"]
homeDir = ENV["HOME"]
targetDir = ENV["HOME"] + "/bin/"

logger.info "You are runnig on " + os.yellow


desc "Create HOME/bin - directory".yellow
task :create_bin do
    #sh "mkdir $HOME/bin"
    FileUtils.mkdir "#{homeDir}/bin" unless File.exists?("#{homeDir}/bin")
end



task :update do
  # neue config anlegen, moven falls vorhanden:
  # mv bin/opcon.yaml $HOME/.opcontoken.yaml
  oldCOnfigFile = targetDir + '/opcon.yaml'
  if File.exist?(oldCOnfigFile)
    puts "Altes config-file gefunden, verschiebe es auf neue location ...".yellow
    FileUtils.mv oldCOnfigFile, homeDir + '/.opcontoken.yaml', verbose: true
  else
    puts "(kein altes config-file gefunden)".green
    puts "Bitte starte 'rake' um zu installieren.".cyan
  end
  puts "done.".green
end



desc "Install bin/ruby-files to: ".yellow + targetDir.cyan
task :install do
    #files = Rake::FileList["odbc/*.rb", "service*/*.rb"]
    files = Rake::FileList["bin/*.rb","rbtools"]
    #puts files
    #puts "Zielverzeichnis: #{targetDir}"
    files.each do |f|
        t = File.basename(f)
        logger.info "Installing #{f} to #{targetDir}#{t} ".cyan
        copy( f, targetDir, verbose: false)
    end
    puts ""
end


desc "Remove installed rb-files from bin-dir: ".yellow + targetDir.cyan
task :clean do
    files = Rake::FileList["bin/*.rb", "service*/*.rb"]
    files.each do |f|
        x = File.basename(f)
        logger.info "Removing #{targetDir}/#{x} ...".red
        rm_f("#{targetDir}/#{x}", verbose:false)
        #puts "#{targetDir}/#{x}"
    end
end


desc "Write opcon-credentials into a config-file".yellow
task :create_config do
  logger.info "Trying to create config file ...".blue
  if File.exists?("#{homeDir}/.opcontoken.yaml")
    logger.info "#{homeDir}/.opcontoken.yaml already exists."
    #logger.info "Nothing to do.".red
  else
    print "Enter Opcon-Database-Username: "
    dbuser = STDIN.gets.chomp
    print "Enter Opcon-Database-Password: "
    dbpass = STDIN.gets.chomp
    puts "writing config to #{homeDir}/.opcontoken.yaml ...".yellow
    f = File.open("#{homeDir}/.opcontoken.yaml", 'w')
    f.puts "opconuser: \"#{dbuser}\""
    f.puts "opconpassword: \"#{dbpass}\""
    f.puts "deployuser: \"deployuser\""
    f.puts "deploypassword: \"thepassword\""
    f.close
    puts "Thank you."
  end
end
